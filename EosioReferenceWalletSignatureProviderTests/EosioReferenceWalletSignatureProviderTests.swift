//
//  EosioReferenceWalletSignatureProviderTests.swift
//  EosioReferenceWalletSignatureProviderTests
//
//  Created by Steve McCoole on 4/16/19.
//  Copyright (c) 2017-2019 block.one and its contributors. All rights reserved.
//

import XCTest
import EosioSwift

@testable import EosioReferenceWalletSignatureProvider

// swiftlint:disable line_length
class EosioReferenceWalletSignatureProviderTests: XCTestCase {

    override func setUp() {

    }

    override func tearDown() {
        // Put teardown code here. This method is called after the invocation of each test method in the class.
    }

    func testSignTransaction() {

        let signatureProvider = EosioReferenceWalletSignatureProvider.shared
        signatureProvider.returnUrl = "toddtransfer://"
        signatureProvider.declaredDomain = "transfer.toddbowden.com"

        var transactionSignatureRequest = EosioTransactionSignatureRequest()
        do {
            transactionSignatureRequest.serializedTransaction = try Data(hex: "b64ccb5c428a6bf2bde3000000000100a6823403ea3055000000572d3ccdcd0100aeaa4ac15cfd4500000000a8ed32326400aeaa4ac15cfd4500000060d234cd3da06806000000000004454f5300000000435768656e20796f752063616e2074616b652074686520706562626c652066726f6d206d792068616e642c2069742077696c6c2062652074696d6520746f206c6561766500")
        } catch {
            XCTFail("Can't initialize serialized transactiont test data.")
        }
        transactionSignatureRequest.publicKeys = ["EOS5j67P1W2RyBXAL8sNzYcDLox3yLpxyrxgkYy1xsXzVCvzbYpba"]
        transactionSignatureRequest.chainId = "687fa513e18843ad3e820744f4ffcf93b1354036d80737db8dc444fe4b15ad17"
        var binaryAbis = [EosioTransactionSignatureRequest.BinaryAbi]()

        var binaryAbi = EosioTransactionSignatureRequest.BinaryAbi()
        binaryAbi.accountName = "eosio.token"
        binaryAbi.abi = "0e656f73696f3a3a6162692f312e30010c6163636f756e745f6e616d65046e616d6505087472616e7366657200040466726f6d0c6163636f756e745f6e616d6502746f0c6163636f756e745f6e616d65087175616e74697479056173736574046d656d6f06737472696e67066372656174650002066973737565720c6163636f756e745f6e616d650e6d6178696d756d5f737570706c79056173736574056973737565000302746f0c6163636f756e745f6e616d65087175616e74697479056173736574046d656d6f06737472696e67076163636f756e7400010762616c616e63650561737365740e63757272656e63795f7374617473000306737570706c790561737365740a6d61785f737570706c79056173736574066973737565720c6163636f756e745f6e616d6503000000572d3ccdcd087472616e73666572bc072d2d2d0a7469746c653a20546f6b656e205472616e736665720a73756d6d6172793a205472616e7366657220746f6b656e732066726f6d206f6e65206163636f756e7420746f20616e6f746865722e0a69636f6e3a2068747470733a2f2f63646e2e746573746e65742e6465762e62316f70732e6e65742f746f6b656e2d7472616e736665722e706e6723636535316566396639656563613334333465383535303765306564343965373666666631323635343232626465643032353566333139366561353963386230630a2d2d2d0a0a2323205472616e73666572205465726d73202620436f6e646974696f6e730a0a492c207b7b66726f6d7d7d2c20636572746966792074686520666f6c6c6f77696e6720746f206265207472756520746f207468652062657374206f66206d79206b6e6f776c656467653a0a0a312e204920636572746966792074686174207b7b7175616e746974797d7d206973206e6f74207468652070726f6365656473206f66206672617564756c656e74206f722076696f6c656e7420616374697669746965732e0a322e2049206365727469667920746861742c20746f207468652062657374206f66206d79206b6e6f776c656467652c207b7b746f7d7d206973206e6f7420737570706f7274696e6720696e6974696174696f6e206f662076696f6c656e636520616761696e7374206f74686572732e0a332e2049206861766520646973636c6f73656420616e7920636f6e747261637475616c207465726d73202620636f6e646974696f6e732077697468207265737065637420746f207b7b7175616e746974797d7d20746f207b7b746f7d7d2e0a0a4920756e6465727374616e6420746861742066756e6473207472616e736665727320617265206e6f742072657665727369626c6520616674657220746865207b7b247472616e73616374696f6e2e64656c61795f7365637d7d207365636f6e6473206f72206f746865722064656c617920617320636f6e66696775726564206279207b7b66726f6d7d7d2773207065726d697373696f6e732e0a0a4966207468697320616374696f6e206661696c7320746f20626520697272657665727369626c7920636f6e6669726d656420616674657220726563656976696e6720676f6f6473206f722073657276696365732066726f6d20277b7b746f7d7d272c204920616772656520746f206569746865722072657475726e2074686520676f6f6473206f72207365727669636573206f7220726573656e64207b7b7175616e746974797d7d20696e20612074696d656c79206d616e6e65722e0000000000a531760569737375650000000000a86cd445066372656174650002000000384f4d113203693634010863757272656e6379010675696e743634076163636f756e740000000000904dc603693634010863757272656e6379010675696e7436340e63757272656e63795f737461747300000000"
        binaryAbis.append(binaryAbi)

        transactionSignatureRequest.abis = binaryAbis

         let expect = expectation(description: "testGetInfo")
        signatureProvider.signTransaction(request: transactionSignatureRequest) { [weak self] (transactionSignatureResponse) in
            guard let strongSelf = self else {
                XCTFail("self does not exist")
                return
            }
            guard let signedTransaction = transactionSignatureResponse.signedTransaction else {
                XCTFail("Signature provider error")
                return
            }
            XCTAssertNotNil(signedTransaction)
            expect.fulfill()
        }
        wait(for: [expect], timeout: 30)
    }
    // swiftlint:enable line_length
}
